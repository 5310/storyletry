* Platform and tooling
  * Pika
    !? Setup
    ? Can I load Pika `./pkg/dist-src/` builds through Unpkg?
      @ https://unpkg.com/#query-params
      ? Specifically test how the build handles CJS-only dependencies
    ? Can I at least build stories into single-file executable bundles with or without built-in Node?
  * Typescript
    !? Tooling
    ? Testing
*` storylets
  !? Write out all types
  !? Implement storyteller
  ? Implement PRNG
    @ https://github.com/sindresorhus/randoma
*` storyteller
  - All the immutability stays at this layer
    @ https://immerjs.github.io/immer/docs/introduction
  *` storyteller-terminal
    ? Can I load Js stories on the CLI?
    ? Formatting
      @ https://github.com/chalk/chalk

* refactor 0.2
  `[

prng(seed) => {
  *random() => 0..1
  *randomIn(min, max) => min..max
  *randomInteger(min, max) => floor(min..max)
  *pick(any[]) => any
  *shuffle(any[]) => any[]
  *boolean(odd) => boolean
  *pickWeighted(weighted[] = {element: any | weighted[], weight: number}[]) => any
}
context = {
  prng
  state: object
  path: number[]
}
reading = {
  state: object
  content: Content[]
  interrupt?: Choice[] | boolean
}

abstract Storyletter
  requires a heuristic to be able to pick substorylets
  sequence breaks when substorylets break
  sequence short-circuits when substorylets return choices

StoryletterChoice extends Storyletter
  no automatic reading 
    each time eligible choices are presented with defined slugs and override tests
  substorylets = {
    slug
    test?
    storylet
  }

StoryletterSequential extends Storyletter
  automatic reading is done in sequence
    reads through list of substorylets in sequence if tests pass

StoryletterRandom extends Storyletter
  automatic reading is always random
    picks through list of substorylets at random if tests pass
      can pick repeats

StoryletterShuffle extends Storyletter
  automatic reading is always random
    shuffles and then picks through list of substorylets in sequence if tests pass

  ]